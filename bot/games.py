
from debug_settings import (BOT_TOKEN) #–ø—Ä–∏ —Ç–µ—Å—Ç–µ —ç—Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
#from bot.settings import (BOT_TOKEN) #–ø—Ä–∏ –ø—Ä–æ–¥–µ —ç—Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
from aiogram import Bot, types
from asyncio import sleep
#import time
import logging

#–ò–≥—Ä–∞ –ß—Ç–æ? –ì–¥–µ? –ö–æ–≥–¥–∞?
class whatWhereWhen:

    logging.basicConfig(level=logging.DEBUG)

    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        #self.quests = db.get_questions(1) # –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã–π, –≤ —Ç–∞–±–ª–∏—Ü–µ application –∏–≥—Ä–µ –ß—Ç–æ?–ì–¥–µ?–ö–æ–≥–¥–∞? —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç id = 1
        self.quests = ['–ü–µ—Ä–≤—ã–π', '–í—Ç–æ—Ä–æ–π']
        self.answers = ['–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç', '–í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç']
        self.quest_num = None
        self.quest_text = ""
        self.quest_answer = ""
        self.quest_comment = ""

        self.game_is_runnig = False
        self.stop_timer = False
        logging.info("QUESTIION: " + str(self.quests))


        self.markup_next_quest = types.InlineKeyboardMarkup(row_width=2)
        btn_next_question = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data='www_next_question')
        btn_finish_game = types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data='www_exit')
        self.markup_next_quest.add(btn_next_question, btn_finish_game)

        self.markup_exit = types.InlineKeyboardMarkup(row_width=1)
        self.markup_exit.add(btn_finish_game)


        self.markup_early_answer = types.InlineKeyboardMarkup(row_width=1)
        btn_skip_time = types.InlineKeyboardButton("–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data='www_early_answer')
        self.markup_early_answer.add(btn_skip_time)


        self.markup_give_minute = types.InlineKeyboardMarkup(row_width=1)
        btn_give_min = types.InlineKeyboardButton("–î–∞—Ç—å –º–∏–Ω—É—Ç—É", callback_data='www_give_minute')
        btn_skip_time = types.InlineKeyboardButton("–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data='www_early_answer')

        self.markup_give_minute.add(btn_give_min)



    async def run_game(self, chat_id):
        self.game_is_runnig = True
        self.quest_num = 0
        self.stop_timer = False
        self.quest_text = "–•–æ—Ä–æ—à–æ, –≤–æ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å!üòà\n\n" + self.quests[self.quest_num]
        #self.quest_answer = self.quests[self.quest_num]["answer"]
        #self.quest_comment = self.quests[self.quest_num]["comment"]

        await self.bot.send_message(chat_id = chat_id, text = self.quest_text)
        await self.bot.send_message(chat_id = chat_id, text ='‚åõ',reply_markup=self.markup_give_minute)


    async def show_answer(self, chat_id):
        await self.bot.send_message(chat_id = chat_id, text='–û—Ç–≤–µ—Ç: ' + self.answers[self.quest_num] + '\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ' )

        if self.quest_num+1 == len(self.quests):
            await self.bot.send_message(chat_id=chat_id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É, –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
                                        reply_markup=self.markup_exit)
        else:
            await self.bot.send_message(chat_id = chat_id, text=str(self.quest_num+1) + ' –∏–∑ ' + str(len(self.quests)) + ' –ø—Ä–æ–π–¥–µ–Ω ‚úÖ',reply_markup=self.markup_next_quest)



    async def early_answer(self):
        logging.info("–ü–æ–ø–∞–ª–∏ –≤ early_answer: " + str(self.stop_timer))
        self.stop_timer = True
        logging.info("–ü—Ä–æ—à–ª–∏ –≤ early_answer: " + str(self.stop_timer))

    async def give_minute(self, chat_id, message_id):
        logging.info("–ó–∞—à–ª–∏ –≤ give_minute: " + str(self.stop_timer))
        text = '–í—Ä–µ–º—è –≤—ã—à–ª–æ'
        if not self.stop_timer:
            logging.info("–ó–∞—à–ª–∏ –≤ give_minute –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º: " + str(self.stop_timer))

            for i in range(1, 60):
                logging.info("–ó–∞—à–ª–∏ –≤ give_minute –≤ —Ü–∏–∫–ª–µ " + str(i) + ": " + str(self.stop_timer))

                if self.stop_timer:
                    logging.info("–ó–∞—à–ª–∏ –≤ give_minute –≤ –¥–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç " + str(i) + ": " + str(self.stop_timer))

                    self.stop_timer = False
                    text = '–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç'
                    break
                await sleep(1)
                logging.info("–ó–∞—à–ª–∏ –≤ give_minute –≤ —Ü–∏–∫–ª " + str(i) + " –∑–∞–≤–µ—Ä—à–µ–Ω: " + str(self.stop_timer))
                await self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=str(60 - i), reply_markup=self.markup_early_answer)
                #await self.bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,reply_markup=self.markup_early_answer)





        else:
            self.stop_timer = False
            text = '–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç'

        await self.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text)
        await self.show_answer(chat_id)
        return


    async def next_question(self, chat_id):

        self.quest_num += 1


        self.quest_text = self.quests[self.quest_num]
        #self.quest_answer = self.quests[self.quest_num][3]
        #self.quest_comment = self.quests[self.quest_num][4]
        await self.bot.send_message(chat_id = chat_id, text = self.quest_text)
        await self.bot.send_message(chat_id = chat_id, text ='‚åõ',reply_markup=self.markup_give_minute)

