import config
import logging
import time

from aiogram import Bot, Dispatcher, executor, types
from sqlighter import SQLighter
#–∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ—Ä—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

#–∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –±–æ—Ç–∞ 
bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher(bot)

#—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –ë–î
db = SQLighter('taran_as_official_bot.db')

#—Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞
markup_games = types.InlineKeyboardMarkup(row_width=1)
btn_chgk_game = types.InlineKeyboardButton("–ß—Ç–æ, –≥–¥–µ, –∫–æ–≥–¥–∞?", callback_data='chgk')
#btn_new_game = types.InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='new')
markup_games.add(btn_chgk_game)

#–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã –ß—Ç–æ –ì–¥–µ –ö–æ–≥–¥–∞?
markup_give_min = types.InlineKeyboardMarkup(row_width=1)
btn_give_min = types.InlineKeyboardButton("–î–∞—Ç—å –º–∏–Ω—É—Ç—É", callback_data='timer_minute')
markup_give_min.add(btn_give_min)

markup_skip = types.InlineKeyboardMarkup(row_width=1)
btn_skip_time = types.InlineKeyboardButton("–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data='show_answer')
markup_skip.add(btn_skip_time)

markup_next_quest = types.InlineKeyboardMarkup(row_width=2)
btn_next_question = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data='next_question')
btn_finish_game = types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data='exit')
markup_next_quest.add(btn_next_question, btn_finish_game)


markup_team_count = types.InlineKeyboardMarkup(row_width=4)
btn_1 = types.InlineKeyboardButton("1", callback_data='setup_team')
btn_2 = types.InlineKeyboardButton("2", callback_data='setup_team')
btn_3 = types.InlineKeyboardButton("3", callback_data='setup_team')
btn_4 = types.InlineKeyboardButton("4", callback_data='setup_team')

markup_team_count.add(btn_1, btn_2, btn_3, btn_4)

#–∏–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î
quest = db.get_questions()
quest_num = 0

#–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –≤ –º–∏–Ω—É—Ç—É
stop_timer = False



#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –º–∞—Å—Å–∏–≤–∞
def next_q_num():
    global quest_num 
    quest_num = quest_num + 1

def init_chgk():
    global quest_num, stop_timer
    quest_num = 0
    stop_timer = False


#–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def get_next_quest(message: types.Message):
    #–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    #print(str(quest_num) + ' - ' + str(len(quest)))
    if(quest_num == len(quest)):
        await bot.send_message(chat_id = message.chat.id, text = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—åüòî\n–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É', reply_markup = markup_games)
    else:
        await bot.send_message(chat_id = message.chat.id, text = quest[quest_num][2])
        await bot.send_message(chat_id = message.chat.id, text='‚åõ',reply_markup=markup_give_min)



async def get_answer(message: types.Message):
    await bot.send_message(chat_id = message.chat.id, text='–û—Ç–≤–µ—Ç: ' + quest[quest_num][3] + '\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ' + quest[quest_num][4])
    await bot.send_message(chat_id = message.chat.id, text=str(quest_num+1) + ' –∏–∑ ' + str(len(quest)) + ' –ø—Ä–æ–π–¥–µ–Ω ‚úÖ',reply_markup=markup_next_quest)

    #–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_q_num()
 

@dp.callback_query_handler(text = 'chgk')
async def process_callback_chgk(call: types.CallbackQuery):
    db.add_log(call.message.from_user.id, 1)
    #–∑–∞–¥–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    init_chgk()
    await bot.send_message(call.from_user.id, '–•–æ—Ä–æ—à–æ, –≤–æ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å!üòà')
    await get_next_quest(call.message)



@dp.callback_query_handler(text = 'timer_minute')
async def process_callback_give_minute(call: types.CallbackQuery):
    #–¥–∞–µ–º –º–∏–Ω—É—Ç—É
    #await post_minute(call.message)

    for i in range(1,60):

        if(not stop_timer):
            time.sleep(1)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=str(60 - i), reply_markup = markup_skip)
        else:
            return
    
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—Ä–µ–º—è –≤—ã—à–ª–æ!')
    time.sleep(1)
    await get_answer(call.message)
    
    

@dp.callback_query_handler(text = 'show_answer')
async def process_callback_show_answer(call: types.CallbackQuery):
    #–∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–∞–π–º–µ—Ä–∞
    global stop_timer
    stop_timer = True

    #—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç—Ä–æ—É—é –Ω–∞–∂–∞–ª–∏
    await bot.edit_message_reply_markup(chat_id = call.message.chat.id, message_id = call.message.message_id,reply_markup=None)

    #–≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
    await get_answer(call.message)

    #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–∞–π–º–µ—Ä–∞
    stop_timer = False

@dp.callback_query_handler(text = 'next_question')
async def process_callback_next_question(call: types.CallbackQuery):
    #—É–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–Ω–æ–ø–∫—É
    await bot.edit_message_reply_markup(chat_id = call.message.chat.id, message_id = call.message.message_id,reply_markup=None)
    await get_next_quest(call.message)

#–≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
@dp.callback_query_handler(text = 'exit')
async def process_callback_exit(call: types.CallbackQuery):
    await bot.send_message(chat_id = call.message.chat.id, text = '–í–æ —á—Ç–æ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å?üòä', reply_markup = markup_games)


#–∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def wellcome(message: types.Message):

    #–¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥
    if(not db.subscriber_exists(message.from_user.id)):
        #–µ—Å–ª–∏ –Ω–µ—Ç –µ–≥–æ, —Ç–æ –¥–æ–±–∞–≤–∏–º
        db.add_subscriber(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username)
        db.close()

    sti = open('image/cat.png','rb')
    await bot.send_sticker(message.chat.id, sti)
    time.sleep(1)
    
    #await message.send_message("–ü—Ä–∏–≤–µ—Ç!", reply_markup=markup_inline)
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –í–æ —á—Ç–æ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å?".format(message.from_user),parse_mode='html',reply_markup=markup_games)

 


#–ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if(not db.subscriber_exists(message.from_user.id)):
        #–µ—Å–ª–∏ –Ω–µ—Ç –µ–≥–æ, —Ç–æ –¥–æ–±–∞–≤–∏–º
        db.add_subscriber(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username)
    else:
        db.update_subscription(message.from_user.id, 1)

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")


#–æ—Ç–ø–∏—Å–∫–∞
@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if(not db.subscriber_exists(message.from_user.id)):
        #–µ—Å–ª–∏ –Ω–µ—Ç –µ–≥–æ, —Ç–æ –¥–æ–±–∞–≤–∏–º
        db.add_subscriber(message.from_user.id, 2)
        await message.answer("–†–∞–Ω–µ–µ –≤—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
    else:
        db.update_subscription(message.from_user.id, 2)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –º–µ–Ω—è")



#–∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
    executor.start_polling(dp,skip_updates=True, timeout = 70)